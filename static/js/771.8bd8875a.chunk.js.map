{"version":3,"file":"static/js/771.8bd8875a.chunk.js","mappings":"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","sources":["components/Loader/Loader.styled.jsx","components/Loader/Loader.jsx","pages/MovieDetails/MovieDetails.styled.jsx","components/MovieCard/MovieCard.styled.jsx","components/MovieCard/MovieCard.jsx","pages/MovieDetails/MovieDetails.jsx","servises/api.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const LoaderWrap = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 100vh;\n`","import { Hourglass } from \"react-loader-spinner\";\nimport { LoaderWrap } from \"./Loader.styled\";\n\nexport const Loader = () => {\n    return (\n        <LoaderWrap>\n            <Hourglass\n  visible={true}\n  height=\"80\"\n  width=\"80\"\n  ariaLabel=\"hourglass-loading\"\n  wrapperStyle={{}}\n  wrapperClass=\"\"\n  colors={['#306cce', '#72a1ed']}\n/>\n        </LoaderWrap>\n        \n    )\n}","import styled from \"styled-components\";\n\n\nexport const Container = styled.div`\n    padding: 20px 40px;\n`;\n\nexport const ButtonBack = styled.button`\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nfont-size: 14px;\nwidth: 100px;\nheight: 30px;\nborder: none;\noutline: none;\ncolor: #fff;\nbackground: #111;\ncursor: pointer;\nposition: relative;\nz-index: 0;\nborder-radius: 10px;\n\n\n`","import { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\n\nexport const MovieCardContainer = styled.div`\n    display: flex;\n    gap: 40px;\n    margin-top: 20px;\n`;\n\nexport const Img = styled.img`\n    height: 600px;\n    width: 400px;\n`;\n\nexport const MovieInfo = styled.div`\n    padding-top: 20px;\n    max-width: 1100px;\n`;\n\nexport const MovieName = styled.h2`\n    margin-bottom: 20px;\n`;\n\nexport const MovieInfoText = styled.p`\n    &:not(:last-child) {\n        margin-bottom: 20px;\n    }\n`;\n\nexport const MovieInfoTextBold = styled.span`\n    display: block;\n    margin-bottom: 20px;\n    font-size: 18px;\n    font-weight: 500;\n`;\n\nexport const MoreInfowrapper = styled.div`\n    margin-top: 20px;\n    padding-top: 20px;\n    padding-bottom: 20px;\n    border-top: 1px solid #d3d3d3;\n    border-bottom: 1px solid #d3d3d3;\n`;\n\nexport const MoreInfoHeader = styled.h3`\n    font-size: 25px;\n    font-weight: 500;\n`\n\nexport const List = styled.ul`\n    margin-top: 20px;\n    display: flex;\n    gap: 20px;\n    font-size: 18px;\n`;\n\nexport const ListItem = styled.li`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n`;\n\nexport const StyledLink = styled(Link)`\n    font-size: 16px;\n    margin-right: 5px;\n    padding: 5px 15px;\n    border: 1px solid #0d57aa;\n    border-radius: 6px;\n    background-color: #b5d1f2;\n    box-shadow: 0px 0px 5px rgba(0, 0, 0, 0.2);\n    transition: all 200ms ease-in-out;\n    text-decoration: none;\n    color: #0d57aa;\n\n    &:hover,\n    &:focus {\n        background-color: #0d57aa;\n        color: #ffffff;\n        box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.3);\n    }\n`;","import { Loader } from \"components/Loader/Loader\";\nimport { useLocation } from \"react-router-dom\";\nimport { MovieCardContainer, Img, MovieInfo, MovieName, MovieInfoText, MovieInfoTextBold, MoreInfowrapper, MoreInfoHeader, List, ListItem, StyledLink } from \"./MovieCard.styled\";\nimport PropTypes from 'prop-types';\n\nconst MovieCard = ({ movie }) => {\n    const { title, release_date, poster_path, vote_average, overview, genres } = movie;\n    const location = useLocation();\n    const releaseDate = new Date(release_date);\n\n    const releaseYear = isNaN(releaseDate)\n        ? 'Unknown'\n        : releaseDate.getFullYear();\n    \n    const posterUrl = poster_path\n        ? `https://image.tmdb.org/t/p/w300${poster_path}`\n        : 'https://upload.wikimedia.org/wikipedia/commons/b/ba/No_image_available_400_x_600.svg';\n    \n    const userScore = vote_average\n        ? `${(vote_average * 10).toFixed(0)}%`\n        : 'Not rated yet';\n    \n    if (!title) {\n        return <Loader />\n    }\n\n    return (\n        <>\n            <MovieCardContainer>\n                <Img src={posterUrl} alt={`${title} poster`} />\n\n                <MovieInfo>\n                    <MovieName>\n                        {title ?? 'Unknown'} ({releaseYear})\n                    </MovieName>\n                    <MovieInfoText>User Score: {userScore}</MovieInfoText>\n                    <MovieInfoText>\n                        <MovieInfoTextBold>Overview:</MovieInfoTextBold>\n                        {overview}\n                    </MovieInfoText>\n\n                    {genres && genres.length > 0 && (\n                        <MovieInfoText>\n                            <MovieInfoTextBold>Genres:</MovieInfoTextBold>\n                            {genres.map(genre => genre.name).join(', ')}\n                        </MovieInfoText>\n                    )}\n                </MovieInfo>\n            </MovieCardContainer>\n\n            <MoreInfowrapper>\n                <MoreInfoHeader>Additional information</MoreInfoHeader>\n\n                <List>\n                    <ListItem>\n                        <StyledLink\n                            to=\"cast\"\n                            state={{ from: location?.state?.from ?? '/' }}\n                        >\n                            Cast\n                        </StyledLink>\n                    </ListItem>\n\n                    <ListItem>\n                        <StyledLink\n                            to=\"reviews\"\n                            state={{ from: location?.state?.from ?? '/' }}\n                        >\n                            Reviews\n                        </StyledLink>\n                    </ListItem>\n                </List>\n            </MoreInfowrapper>\n        </>\n    );\n};\n\nMovieCard.propTypes = {\n    movie: PropTypes.shape({\n        title: PropTypes.string.isRequired,\n        release_date: PropTypes.string.isRequired,\n        poster_path: PropTypes.string.isRequired,\n        vote_average: PropTypes.number,\n        overview: PropTypes.string,\n        genres: PropTypes.arrayOf(\n            PropTypes.shape({name: PropTypes.string.isRequired})\n        ),\n    }).isRequired,\n}\n\n\nexport default MovieCard;","import { Suspense, useEffect, useState } from \"react\";\nimport { Outlet, useLocation, useParams, Link } from \"react-router-dom\";\nimport { fetchMovieById } from \"servises/api\";\nimport { ButtonBack, Container } from \"./MovieDetails.styled\";\nimport { AiOutlineArrowLeft } from \"react-icons/ai\";\nimport MovieCard from \"components/MovieCard/MovieCard\";\nimport { Loader } from \"components/Loader/Loader\";\n\n\nconst MovieDetails = () => {\n    const { movieId } = useParams();\n    const location = useLocation();\n    const [selectedMovie, setSelectedMovie] = useState({});\n\n    useEffect(() => {\n        const fetchSelectedMovie = async movieId => {\n            try {\n                const movieData = await fetchMovieById(movieId);\n                setSelectedMovie(movieData);\n            } catch (error) {\n                console.log(error);\n            }\n        };\n\n        fetchSelectedMovie(movieId)\n    }, [movieId]);\n\n    return (\n        <main>\n            <Container>\n                <Link to={location?.state?.from ?? '/'}>\n                    <ButtonBack type=\"button\">\n                        <AiOutlineArrowLeft\n                            style={{ width: '25px', height: '25px', display: 'inline-block' }} />\n                        Go back\n                    </ButtonBack>\n                </Link>\n\n                <MovieCard movie={selectedMovie} />\n\n                <Suspense fallback={<Loader />}>\n                    <Outlet />\n                </Suspense>\n            </Container>\n        </main>\n    );\n};\n\n\nexport default MovieDetails;","import axios from \"axios\";\n\nconst baseURL = 'https://api.themoviedb.org';\nconst API_KEY = 'bd6023ae3d7655a9ba206f8d576c79ae';\n\nexport const fetchTrendMovies = async () => {\n    const { data } = await axios.get(`${baseURL}/3/trending/movie/day?api_key=${API_KEY}`);\n\n    return data;\n};\n\nexport const fetchMovieByName = async query => {\n    const { data } = await axios.get(\n        `${baseURL}/3/search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n    );\n\n    return data;\n};\n\nexport const fetchMovieById = async movieId => {\n    const { data } = await axios.get(\n        `${baseURL}/3/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n    );\n\n    return data;\n};\n\n\nexport const fetchMovieCast = async movieId => {\n    const { data } = await axios.get(\n        `${baseURL}/3/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n    );\n\n    return data;\n};\n\nexport const fetchMovieReviews = async movieId => {\n    const { data } = await axios.get(\n        `${baseURL}/3/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n    );\n\n    return data;\n};"],"names":["LoaderWrap","styled","_templateObject","_taggedTemplateLiteral","Loader","_jsx","children","Hourglass","visible","height","width","ariaLabel","wrapperStyle","wrapperClass","colors","Container","ButtonBack","_templateObject2","MovieCardContainer","Img","MovieInfo","_templateObject3","MovieName","_templateObject4","MovieInfoText","_templateObject5","MovieInfoTextBold","_templateObject6","MoreInfowrapper","_templateObject7","MoreInfoHeader","_templateObject8","List","_templateObject9","ListItem","_templateObject10","StyledLink","Link","_templateObject11","_ref","_location$state$from","_location$state","_location$state$from2","_location$state2","movie","title","release_date","poster_path","vote_average","overview","genres","location","useLocation","releaseDate","Date","releaseYear","isNaN","getFullYear","posterUrl","concat","userScore","toFixed","_jsxs","_Fragment","src","alt","length","map","genre","name","join","to","state","from","movieId","useParams","_useState","useState","_useState2","_slicedToArray","selectedMovie","setSelectedMovie","useEffect","fetchSelectedMovie","_asyncToGenerator","_regeneratorRuntime","_callee","movieData","_context","prev","next","fetchMovieById","sent","t0","console","log","stop","_x","apply","arguments","type","AiOutlineArrowLeft","style","display","MovieCard","Suspense","fallback","Outlet","baseURL","API_KEY","fetchTrendMovies","_yield$axios$get","data","axios","abrupt","fetchMovieByName","_ref2","_callee2","query","_yield$axios$get2","_context2","_ref3","_callee3","_yield$axios$get3","_context3","_x2","fetchMovieCast","_ref4","_callee4","_yield$axios$get4","_context4","_x3","fetchMovieReviews","_ref5","_callee5","_yield$axios$get5","_context5","_x4"],"sourceRoot":""}